Project Outline:

Phase 1: Requirements and Design (1 week)
	-Tasks:
		x Finalize Requirements: Review the project scope and confirm feature details.
		x Design UI Mockups: Sketch the basic layout of the Tkinter interface to ensure intuitive navigation.
			x UI does not require a sketch. UI has a sidebar with two buttons and logo / title and a main content window. Simple.
		x Define Multi-Threading Structure: Plan threads for UI, background logic, and I/O.
			x UI will run in it's own thread to prevent UI interupts
			x I/O and Background Logic will run in the same thread with I/O being input to background logic on a clock basis to ensure appropriate time to process each input. 
		x Security Outline: Specify Client-To-Broker and Broker-To-Client authentication.
			x Client-To-Broker authentication uses premade username & password method provided by Mosquitto
			x Broker-To-Client uses custom HMAC (hash-based message authentication code) system.
				x Client connects to broker and subscribes to authentication topic, then sends a randomly generated key with sender id. Broker then takes the key, generates a hashed value using a PSK, and replies with the newly hashed value and 
					audiance id.
			x Both Broker & Client will have a backup PSK that both fallback on when generating a new PSK. The PSK is encrypted using backup PSK and sent from client to broker (to prevent network wide intrusion). The PSK is stored by both parties
				and is used as the new PSK. Both backup and main PSKs must be replace in the event of breach. PSKs are replaced on a yearly basis automatically. The backup PSK should be only be recognized by either party when both parties have agreed
				to generate a new PSK. 
		x Sound Notifications: Identify events for which sound notification will be needed and choose or create sound files.
			x Page & New Order Received
				x Page emits sound every 30 seconds until aknowledged
				x New order emits sound once
		x Select Libraries: Confirm versions for MQTT, playsound, and threading modules.
			Libaries and versions defined in project scope document.
		x Deliverables: Requirements document, UI design mockups, thread structure plan, sound notifications specification.
	
Phase 2: UI Development in Tkinter (3 weeks)
	-Tasks:
		- Create Tkinter UI Framework: Develop basic screens and layout for the interface.
		- Implement Input Fields and Validation: Add fields with initial validation for expected user inputs.
		- Integrate Sound Notifications: Create a playsound function and link events to it.
		- Initial Performance Testing: Run basic checks to ensure UI responsiveness.
		- Deliverables: Working UI prototype with basic input fields, validation, and sound notifications.

Phase 3: Network Setup with MQTT (2-3 weeks)
	-Tasks:
		- Set Up MQTT Broker: Develop, install, and configure a broker on dedicated hardware.
		- Implement Client-To-Broker Authentication: Set up credentials and test the authentication process.
		- Implement Broker-To-Client Authentication: configure MQTT broker settings to validate clients.
		- Integrate MQTT with Tkinter: Establish basic connection and message-passing functions.
		- Initial Network Testing: Verify connectivity and data flow between devices.
		- Deliverables: Functioning MQTT communication setup with dual authentication.
		
Phase 4: Multi-Threading Implementation (2 weeks)
	-Tasks:
		- Set Up Multi-Threading Structure: Define and initialize threads for UI, background logic, and I/O.
		- Isolate Background Logic In It's Thread: Separate main application logic from UI to prevent blocking.
		- Separate Network I/O Operations: Move MQTT operations to a dedicated thread.
		- Performance Tuning: Monitor system load on Raspberry Pi, adjusting threading for optimal performance.
		- Deliverables: Multi-threaded application structure with each core function running independently.

Phase 5: Data Validation and Security Testing (1 week)
	-Tasks:
		- Validate User Input Fields: Ensure correct handling of inputs, sanitizing and verifying them.
		- Implement Network Data Validation: Sanitize incoming MQTT messages.
		- Security Testing: Test client-to-broker and broker-to-client authentication under various condiditons.
		- Deliverables: Comprehensive data validation with documented security test results.
	
Phase 6: Final Testing and Optimization (2 weeks)
	-Tasks:
		- Functional Testing: Run end-to-end tests on all components, including UI, sound notifications, and MQTT messaging.
		- Performand Testing on Raspberry Pi: Monitor CPU and memory usage, adjusting the code if necessary.
		- Usability Testing: Get user feedback on the UI design for further refinement.
		- Final Debugging and Code Optimization: Address any remainnig bugs or performance issues.
		- Deliverables: Fully tested, optimized program ready for deployment.

Phase 7: Deployment and Documentation (1 week)
	-Tasks:
		- Deployment on Raspberry Pi 5: Install the final version on target hardware.
		- Create User Guide: Document intstructions for usage, focusing on the UI and key features.
		- Technical Documentation: Include setup instructions, code structure, and security configurations.
		-Deliverables: Deployed application with user and technical documentation.